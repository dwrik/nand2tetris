// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Select b/w instruction and M
    Mux16 (a=instruction, b=outMMux, sel=instruction[15], out=aIn);

    // Load register A if A-instruction or C-instruction with dest A
    Not (in=instruction[15], out=aInst);
    Or  (a=aInst, b=instruction[5], out=loadA);

    // Address register A
    ARegister (in=aIn, load=loadA, out=aOut, out[0..14]=addressM);

    // Load register D if C-instruction with dest D
    And  (a=instruction[15], b=instruction[4], out=loadD);

    // Data register D
    DRegister (in=outMD, load=loadD, out=dOut);

    // Write to RAM[A] or M if C-instruction and dest M
    And (a=instruction[15], b=instruction[3], out=writeM);

    // Select b/w A and M
    Mux16 (a=aOut, b=inM, sel=instruction[12], out=aOrM);

    // Arithmetic Logic Unit (ALU)
    ALU (x=dOut, y=aOrM, zx=instruction[11], nx=instruction[10],
            zy=instruction[9], ny=instruction[8], f=instruction[7],
                no=instruction[6], zr=zero, ng=sign, out=outMMux, out=outMD, out=outM);

    // Conditional Jumps
    And (a=zero, b=true, out=jeq);  // JEQ
    Not (in=jeq, out=jne);          // JNE
    And (a=sign, b=true, out=jlt);  // JLT
    Or  (a=jlt, b=jeq, out=jle);    // JLE
    Not (in=jle, out=jgt);          // JGT
    Not (in=jlt, out=jge);          // JGE
    Not (in=false, out=jmp);        // JMP
    Not (in=true, out=noj);         // NOJ

    // Set load bit for PC based on conditional jumps
    Mux8Way16 (a[0]=noj, b[0]=jgt, c[0]=jeq, d[0]=jge, e[0]=jlt,
                f[0]=jne, g[0]=jle, h[0]=jmp, sel=instruction[0..2], out[0]=pcJmp);

    // Ignore jump bits if A-instruction
    And (a=instruction[15], b=pcJmp, out=pcLoad);

    // Increment bit for PC
    Not (in=pcLoad, out=pcInc);

    // Program Counter (PC)
    PC (in=aOut, load=pcLoad, inc=pcInc, reset=reset, out[0..14]=pc);
}
